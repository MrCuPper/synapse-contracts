{
  "address": "0x77a7e60555bC18B4Be44C181b2575eee46212d44",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "BonusChefCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "miniChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chefPoolID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardsDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xae9d3cb6d99c2533e81dd5570e7a2516aae8cb588b2b5d9eb5d61e72a939b12f",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x77a7e60555bC18B4Be44C181b2575eee46212d44",
    "transactionIndex": 0,
    "gasUsed": "3438299",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9a78988ed05c7e5f7b8ebdc578b1219cd99dee58aac7ec0e0fd9de15dcdb31a9",
    "transactionHash": "0xae9d3cb6d99c2533e81dd5570e7a2516aae8cb588b2b5d9eb5d61e72a939b12f",
    "logs": [],
    "blockNumber": 410960,
    "cumulativeGasUsed": "3438299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ac0fd7d60dcb1a3d3edc3dddb03bac3e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"BonusChefCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"miniChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefPoolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,uint256,address,address)\":{\"notice\":\"deploys a new bonus chef contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/BonusChefFactory.sol\":\"BonusChefFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    // EIP 2612\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\",\"keccak256\":\"0x8004f86e4536cca55b8eeb2621fe18e1ee57d779396ddef50bce5bf70fb59867\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeName(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x69f1ccf716991e5d6d64dc0e3bc3828fd1990bc18400d680b1aa1960675daaaa\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/bridge/BonusChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport {IERC20, BoringERC20} from \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport {IMiniChefV2} from \\\"./interfaces/IMiniChefV2.sol\\\";\\nimport {IRewarder} from \\\"./interfaces/IRewarder.sol\\\";\\n\\n// MultiStakingRewards contract that allows stakers to staking a single token and receive various reward tokens.\\n// Modified from Uniswap staking reward contract at https://etherscan.io/address/0x7FBa4B8Dc5E7616e59622806932DBea72537A56b#code\\n// with the following changes:\\n// - Expand from single reward token to a list of reward tokens\\n// - Allow removing inactive reward pools from list in case list grows above iteration gas limit\\n// - Allow governance to rescue unclaimed tokens of inactive pools\\n\\n// Modified from AladdinDAO MultiStakingRewards contract at https://github.com/AladdinDAO/aladdin-contracts/blob/main/contracts/reward/MultiStakingRewards.sol\\n// with the following changes:\\n// 1. To ensure compatibility with existing IRewarder interface:\\n//      a. SafeERC20 -> BoringERC20\\n//      b. onParentReward() -> onSynapseReward()\\n//      c. added pendingTokens(), which returns a list of ALL pending rewards for user\\n// 2. To ensure compatibility with deployed MiniChefV2 contract:\\n//      a. Sending rewards to custom address is possible to make sure\\n//         bonus rewards are always transferred to the same address as SYN rewards\\n// 3. Removed stake and withdraw, as they happen in the MiniChef\\n// 4. Read staking balance and total supply from MiniChef\\n// 5. notifyRewardAmount updated to transferFrom(msg.sender) instead of using permissioned distributor\\n// 6. Added a few sanity checks\\n// 7. Governance and RewardsDistribution roles are now handled by AccessControl\\n\\n/// @dev How BonusChef and MiniChefV21 are supposed to work together?\\n/// BonusChef contract is linked to an existing pool in MiniChefV21.\\n/// BonusChef can handle arbitrary amount of \\\"bonus tokens\\\" for a single pool,\\n/// each of the bonus tokens can have arbitrary reward rate and duration.\\n\\n/// @dev General setup\\n/// 1. Pool is created on MiniChefV21 (or it already exists)\\n/// 2. BonusChef is created, specifying MiniChef contract and needed pool ID.\\n/// 3. BonusChef is set as a rewarder for pool ID on MiniChefV21\\n/// 4. Later, each bonus token for the same pool on MiniChef is added\\n///    to the same BonusChef contract.\\n\\n/// @dev How to add a new \\\"bonus reward\\\" for a given pool:\\n/// 1. addRewardPool(r, T) is called by governance,\\n///    specifying the bonus token (r) and its reward duration (T).\\n/// 2. notifyRewardAmount(r, A) is called by rewards distributor,\\n///    specifying the bonus token (r) and amount (A) of bonus tokens to distribute.\\n/// 3. Bonus token distribution is started IMMEDIATELY. Exactly A tokens will be\\n///    distributed over time period T.\\n\\n/// @dev How to extend an existing \\\"bonus reward\\\":\\n/// 1. notifyRewardAmount(r, B) will distribute (B + leftover from previous round)\\n///    tokens over THE SAME time period T, starting IMMEDIATELY.\\n///    Math needs to be done, if leftover is meaningful amount, to not mess up the reward rate.\\n/// PS. notifyRewardAmount(r, 1) will effectively cut the reward rate, so\\n///     rewardDistribution should be a trusted account\\n\\n/// @dev How to remove an existing \\\"bonus reward\\\". Only use for deprecated bonus tokens,\\n///      which have been mostly claimed by the users:\\n/// 1. Wait until the bonus duration is finished.\\n/// 2. inactivateRewardPool(r) will bonus token (r) from the list of bonus tokens,\\n///    also all earned but unclaimed user rewards will become unclaimable,\\n///    they can only be rescued by calling rescue(r) now. USE WITH CAUTION.\\n/// PS. inactivateRewardPool(r) and later addRewardPool(r, TT) is the only way to change\\n///     reward duration period (from T to TT).\\ncontract BonusChef is IRewarder, ReentrancyGuard, AccessControl {\\n    using SafeMath for uint256;\\n    using BoringERC20 for IERC20;\\n\\n    /* ========== ROLES ========== */\\n\\n    /// @notice Account with this role can add reward pools,\\n    /// inactivate reward pools, rescue tokens from inactive reward pools,\\n    /// grant rewardsDistribution role\\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n\\n    /// @notice Account with this role is able to provide rewards,\\n    /// starting (or prolonging) the bonus rewards period\\n    bytes32 public constant REWARDS_DISTRIBUTION_ROLE =\\n        keccak256(\\\"REWARDS_DISTRIBUTION_ROLE\\\");\\n\\n    /* ========== STRUCTS ========== */\\n\\n    // Info of each reward pool.\\n    struct RewardPool {\\n        IERC20 rewardToken; // Address of reward token.\\n        uint256 periodFinish; // timestamp of when this reward pool finishes distribution\\n        uint256 rewardRate; // amount of rewards distributed per unit of time\\n        uint256 rewardsDuration; // duration of distribution\\n        uint256 lastUpdateTime; // timestamp of when reward info was last updated\\n        uint256 rewardPerTokenStored; // current rewards per token based on total rewards and total staked\\n        mapping(address => uint256) userRewardPerTokenPaid; // amount of rewards per token already paid out to user\\n        mapping(address => uint256) rewards; // amount of rewards user has earned\\n        bool isActive; // mark if the pool is active\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /// @notice BonusChef is linked to the specific pool on MiniChef contract\\n    /// Each reward pool specifies a different reward token for THE SAME pool on MiniChef\\n\\n    IMiniChefV2 public immutable miniChef;\\n    uint256 public immutable chefPoolID;\\n    IERC20 public immutable chefStakingToken;\\n\\n    mapping(address => RewardPool) public rewardPools; // reward token to reward pool mapping\\n    address[] public activeRewardPools; // list of reward tokens that are distributing rewards\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        IMiniChefV2 _miniChef,\\n        uint256 _chefPoolID,\\n        address _rewardsDistribution,\\n        address _governance\\n    ) public {\\n        miniChef = _miniChef;\\n        chefPoolID = _chefPoolID;\\n        chefStakingToken = _miniChef.lpToken(_chefPoolID);\\n\\n        _setupRole(GOVERNANCE_ROLE, _governance);\\n        _setupRole(REWARDS_DISTRIBUTION_ROLE, _rewardsDistribution);\\n\\n        _setRoleAdmin(GOVERNANCE_ROLE, GOVERNANCE_ROLE);\\n        _setRoleAdmin(REWARDS_DISTRIBUTION_ROLE, GOVERNANCE_ROLE);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /**\\n        @notice Get amount of active reward pools.\\n        Some of them may be finished or haven't been started yet though.\\n     */\\n    function activeRewardPoolsLength() external view returns (uint256) {\\n        return activeRewardPools.length;\\n    }\\n\\n    /**\\n        @notice Get timestamp for the current (not yet processed)\\n        batch of rewards\\n        @param _rewardToken bonus reward token to check\\n     */\\n    function lastTimeRewardApplicable(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return Math.min(block.timestamp, pool.periodFinish);\\n    }\\n\\n    /**\\n        @notice Get total amount of bonus rewards per 1 LP token\\n        in the MiniChef from the start of bonus pool\\n        @param _rewardToken bonus reward token to check\\n     */\\n    function rewardPerToken(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            return pool.rewardPerTokenStored;\\n        }\\n        return\\n            pool.rewardPerTokenStored.add(\\n                lastTimeRewardApplicable(_rewardToken)\\n                    .sub(pool.lastUpdateTime)\\n                    .mul(pool.rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    /**\\n        @notice Get amount of pending user bonus rewards\\n        @param _rewardToken bonus reward token to check\\n        @param _account user address\\n     */\\n    function earned(address _rewardToken, address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _earned(_rewardToken, _account, balanceOf(_account));\\n    }\\n\\n    /**\\n        @notice Get total amount of LP tokens locked in the MiniChef pool\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return chefStakingToken.balanceOf(address(miniChef));\\n    }\\n\\n    /**\\n        @notice Get user amount of LP tokens locked in the MiniChef pool\\n        @param _account user address\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        (uint256 balance, ) = miniChef.userInfo(chefPoolID, _account);\\n        return balance;\\n    }\\n\\n    /**\\n        @notice Get total amount of rewards tokens that will be distributed\\n        since the last time reward pool was started\\n        @param _rewardToken bonus reward token to check\\n     */\\n    function getRewardForDuration(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardRate.mul(pool.rewardsDuration);\\n    }\\n\\n    /**\\n        @notice Get timestamp for bonus rewards to end\\n        @param _rewardToken bonus reward token to check\\n     */\\n    function periodFinish(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.periodFinish;\\n    }\\n\\n    /**\\n        @notice Get amount of reward tokens distributed per second\\n        @dev APR = rewardRate(_rewardToken) * secondsInYear * usdValue(_rewardToken) / \\n        (totalSupply() * usdValue(chefStakingToken))\\n        @param _rewardToken bonus reward token to check\\n     */\\n    function rewardRate(address _rewardToken) external view returns (uint256) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardRate;\\n    }\\n\\n    /**\\n        @notice Get total duration of a bonus reward pool\\n        @param _rewardToken bonus reward token to check\\n     */\\n    function rewardsDuration(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardsDuration;\\n    }\\n\\n    /**\\n        @notice Get timestamp for the last payout in the bonus reward pool\\n        @param _rewardToken bonus reward token to check\\n     */\\n    function lastUpdateTime(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.lastUpdateTime;\\n    }\\n\\n    /**\\n        @notice Get total amount of bonus rewards per 1 LP token\\n        in the MiniChef from the start of bonus pool until last update\\n        @param _rewardToken bonus reward token to check\\n     */\\n    function rewardPerTokenStored(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardPerTokenStored;\\n    }\\n\\n    /**\\n        @notice Get amount of bonus rewards paid to user per 1 LP token\\n        @param _rewardToken bonus reward token to check\\n        @param _account user address\\n     */\\n    function userRewardPerTokenPaid(address _rewardToken, address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.userRewardPerTokenPaid[_account];\\n    }\\n\\n    /**\\n        @notice Get last stored amount of user's unpaid bonus rewards\\n        @param _rewardToken bonus reward token to check\\n        @param _account user address\\n     */\\n    function rewards(address _rewardToken, address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewards[_account];\\n    }\\n\\n    /**\\n        @notice Get all pending bonus rewards for user\\n        @param _account user address\\n     */\\n    function pendingTokens(\\n        uint256,\\n        address _account,\\n        uint256\\n    ) external view override returns (IERC20[] memory, uint256[] memory) {\\n        uint256 _activePoolsAmount = activeRewardPools.length;\\n        IERC20[] memory _rewardTokens = new IERC20[](_activePoolsAmount);\\n        uint256[] memory _rewardAmounts = new uint256[](_activePoolsAmount);\\n        uint256 _balance = balanceOf(_account);\\n        for (uint8 i = 0; i < _activePoolsAmount; i++) {\\n            address _rewardToken = activeRewardPools[i];\\n            _rewardTokens[i] = IERC20(_rewardToken);\\n            _rewardAmounts[i] = _earned(_rewardToken, _account, _balance);\\n        }\\n\\n        return (_rewardTokens, _rewardAmounts);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n        @notice Callback to distribute user's bonus rewards\\n        @dev Called whenever a user interacts with MiniChef\\n        @param _account user address\\n        @param _recipient address to sent bonus rewards\\n        @param _oldAmount user's LP tokens balance BEFORE the interaction\\n     */\\n    function onSynapseReward(\\n        uint256,\\n        address _account,\\n        address _recipient,\\n        uint256 _synapseAmount,\\n        uint256 _oldAmount\\n    ) external override onlyMiniChef nonReentrant {\\n        // We check for reentrancy here, as this is the only function\\n        // that can be called by anyone (interacting with MiniChef)\\n        _getAllActiveRewardsFor(\\n            _account,\\n            _recipient,\\n            _oldAmount,\\n            _synapseAmount > 0\\n        );\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /**\\n        @notice Provide bonus rewards\\n        @dev\\n        Called by rewardsDistribution AFTER the pool for _rewardToken is\\n        set up via addRewardPool(_rewardToken, _rewardsDuration)\\n\\n        rewardsDistribution has to approve this contract\\n        to spend _rewardToken beforehand\\n        \\n        If the pool is running:\\n            Will add (_amount) to the reward pool\\n            and extend its duration by pool.rewardsDuration\\n\\n        If the pool is NOT running (finished or hasn't been started once)\\n            Will set (_amount) as the reward pool capacity and start the pool\\n            IMMEDIATELY. Pool will be running for pool.rewardsDuration\\n        @param _rewardToken reward token to supply\\n        @param _amount amount of reward token to supply\\n     */\\n    function notifyRewardAmount(address _rewardToken, uint256 _amount)\\n        external\\n        onlyRewardsDistribution\\n        updateReward(_rewardToken, address(0), 0)\\n    {\\n        require(_amount != 0, \\\"Zero reward provided\\\");\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.isActive, \\\"Pool is not added\\\");\\n\\n        pool.rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        if (block.timestamp >= pool.periodFinish) {\\n            pool.rewardRate = _amount.div(pool.rewardsDuration);\\n        } else {\\n            uint256 remaining = pool.periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(pool.rewardRate);\\n            pool.rewardRate = _amount.add(leftover).div(pool.rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = pool.rewardToken.balanceOf(address(this));\\n        require(\\n            pool.rewardRate <= balance.div(pool.rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        pool.lastUpdateTime = block.timestamp;\\n        pool.periodFinish = block.timestamp.add(pool.rewardsDuration);\\n\\n        emit RewardAdded(_rewardToken, _amount);\\n    }\\n\\n    /**\\n        @notice Add new reward pool to list, but do NOT start it.\\n        @dev This can also be used to add inactive pool, make sure\\n        to rescue() all the remaining tokens from previous round beforehand.\\n        Otherwise, previously unclaimed rewards can be claimed only after\\n        the pool is inactive again.\\n        @param _rewardToken bonus reward token\\n        @param _rewardsDuration duration of the bonus pool, in seconds\\n     */\\n    function addRewardPool(address _rewardToken, uint256 _rewardsDuration)\\n        external\\n        onlyGov\\n    {\\n        require(\\n            address(miniChef.rewarder(chefPoolID)) == address(this),\\n            \\\"MiniChef pool isn't set up\\\"\\n        );\\n        require(rewardPools[_rewardToken].isActive == false, \\\"Pool is active\\\");\\n        require(_rewardsDuration != 0, \\\"Duration is null\\\");\\n        rewardPools[_rewardToken] = RewardPool({\\n            rewardToken: IERC20(_rewardToken),\\n            periodFinish: 0,\\n            rewardRate: 0,\\n            rewardsDuration: _rewardsDuration,\\n            lastUpdateTime: 0,\\n            rewardPerTokenStored: 0,\\n            isActive: true\\n        });\\n        activeRewardPools.push(_rewardToken);\\n    }\\n\\n    /**\\n        @notice Remove rewards pool from active list\\n        @dev All rewards from the pool become unclaimable,\\n        only rescue() can get them out after that\\n        @param _rewardToken bonus reward token to inactivate\\n     */\\n    function inactivateRewardPool(address _rewardToken) external onlyGov {\\n        // find the index\\n        uint256 indexToDelete = 0;\\n        bool found = false;\\n        for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n            if (activeRewardPools[i] == _rewardToken) {\\n                indexToDelete = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        require(found, \\\"Reward pool not found\\\");\\n        _inactivateRewardPool(indexToDelete);\\n    }\\n\\n    /**\\n        @notice Remove rewards pool from active list\\n        @dev In case the list gets so large and make iteration impossible.\\n        All rewards from the pool become unclaimable,\\n        only rescue() can get them out after that.\\n        @param _index index of bonus pool to inactivate\\n     */\\n    function inactivateRewardPoolByIndex(uint256 _index) external onlyGov {\\n        _inactivateRewardPool(_index);\\n    }\\n\\n    /**\\n        @notice Internal implementation for removing a reward pool\\n        @param _index index of bonus pool to inactivate\\n     */\\n    function _inactivateRewardPool(uint256 _index) internal {\\n        RewardPool storage pool = rewardPools[activeRewardPools[_index]];\\n        require(block.timestamp >= pool.periodFinish, \\\"Pool has not concluded\\\");\\n        pool.isActive = false;\\n        // we don't care about the ordering of the active reward pool array\\n        // so we can just swap the element to delete with the last element\\n        activeRewardPools[_index] = activeRewardPools[\\n            activeRewardPools.length - 1\\n        ];\\n        activeRewardPools.pop();\\n    }\\n\\n    /**\\n        @notice Rescue unclaimed reward tokens from inactive pool\\n        @dev Only governance can rescue tokens and only from inactive pools\\n        @param _rewardToken bonus reward token to rescue\\n     */\\n    function rescue(address _rewardToken) external onlyGov {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.isActive == false, \\\"Cannot withdraw active reward token\\\");\\n\\n        uint256 _balance = IERC20(_rewardToken).balanceOf(address(this));\\n        IERC20(_rewardToken).safeTransfer(msg.sender, _balance);\\n    }\\n\\n    /**\\n        @notice Add the rewards supplier\\n        @dev Make sure that _rewardsDistribution is vetted\\n        While this role can't claim/drain tokens, it can prolong the pools at will.\\n        @param _rewardsDistribution new reward supplier\\n     */\\n    function addRewardsDistribution(address _rewardsDistribution)\\n        external\\n        onlyGov\\n    {\\n        _setupRole(REWARDS_DISTRIBUTION_ROLE, _rewardsDistribution);\\n    }\\n\\n    /**\\n        @notice Change the governor\\n        @dev Do not transfer this role to untrusted address,\\n        or funds might be SIFUed\\n        @param _governance new governor\\n     */\\n    function transferGovernance(address _governance) external onlyGov {\\n        emit GovernanceChange(_governance);\\n\\n        renounceRole(GOVERNANCE_ROLE, msg.sender);\\n        _setupRole(GOVERNANCE_ROLE, _governance);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n        @notice Claim all pending bonus rewards for a user\\n        @dev Called whenever a user interacts with MiniChef\\n        @param _account user address\\n        @param _recipient address to sent bonus rewards\\n        @param _oldAmount user's LP tokens balance BEFORE the interaction\\n     */\\n    function _getAllActiveRewardsFor(\\n        address _account,\\n        address _recipient,\\n        uint256 _oldAmount,\\n        bool _claimRewards\\n    ) internal updateActiveRewards(_account, _oldAmount) {\\n        if (_claimRewards) {\\n            for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n                _getReward(activeRewardPools[i], _account, _recipient);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice Claim a pending bonus reward for a user\\n        @param _rewardToken bonus reward token to claim\\n        @param _account user address\\n        @param _recipient address to sent bonus rewards\\n     */\\n    function _getReward(\\n        address _rewardToken,\\n        address _account,\\n        address _recipient\\n    ) internal {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.isActive, \\\"Pool is inactive\\\");\\n\\n        uint256 reward = pool.rewards[_account];\\n        if (reward > 0) {\\n            pool.rewards[_account] = 0;\\n            pool.rewardToken.safeTransfer(_recipient, reward);\\n            emit RewardPaid(\\n                address(pool.rewardToken),\\n                _account,\\n                _recipient,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /**\\n        @notice Get pending bonus reward for a user\\n        @param _rewardToken bonus reward token to claim\\n        @param _account user address\\n        @param _oldAmount user balance of LP tokens at the time of last payout\\n     */\\n    function _earned(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _oldAmount\\n    ) internal view returns (uint256) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return\\n            _oldAmount\\n                .mul(\\n                    rewardPerToken(_rewardToken).sub(\\n                        pool.userRewardPerTokenPaid[_account]\\n                    )\\n                )\\n                .div(1e18)\\n                .add(pool.rewards[_account]);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /**\\n        @notice Update all pools stored info about the rewards, and also \\n        update the stored info about user's pending rewards.\\n        @dev The user update is ignored if address(0) is supplied\\n        @param _account user address\\n        @param _oldAmount user balance of LP tokens at the time of last payout\\n     */\\n    modifier updateActiveRewards(address _account, uint256 _oldAmount) {\\n        for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n            RewardPool storage pool = rewardPools[activeRewardPools[i]];\\n\\n            pool.rewardPerTokenStored = rewardPerToken(\\n                address(pool.rewardToken)\\n            );\\n            pool.lastUpdateTime = lastTimeRewardApplicable(\\n                address(pool.rewardToken)\\n            );\\n            if (_account != address(0)) {\\n                pool.rewards[_account] = _earned(\\n                    address(pool.rewardToken),\\n                    _account,\\n                    _oldAmount\\n                );\\n                pool.userRewardPerTokenPaid[_account] = pool\\n                    .rewardPerTokenStored;\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n        @notice Update a single pool stored info about the rewards, and also \\n        update the stored info about user's pending rewards.\\n        @dev The user update is ignored if address(0) is supplied\\n        @param _rewardToken reward token for a pool to update\\n        @param _account user address\\n        @param _oldAmount user balance of LP tokens at the time of last payout\\n     */\\n    modifier updateReward(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _oldAmount\\n    ) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n\\n        pool.rewardPerTokenStored = rewardPerToken(address(pool.rewardToken));\\n        pool.lastUpdateTime = lastTimeRewardApplicable(\\n            address(pool.rewardToken)\\n        );\\n        if (_account != address(0)) {\\n            pool.rewards[_account] = _earned(\\n                address(pool.rewardToken),\\n                _account,\\n                _oldAmount\\n            );\\n            pool.userRewardPerTokenPaid[_account] = pool.rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyMiniChef() {\\n        require(msg.sender == address(miniChef), \\\"!parent\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \\\"!governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardsDistribution() {\\n        require(\\n            hasRole(REWARDS_DISTRIBUTION_ROLE, msg.sender),\\n            \\\"!rewardsDistribution\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(address indexed rewardToken, uint256 amount);\\n    event RewardPaid(\\n        address indexed rewardToken,\\n        address indexed user,\\n        address recipient,\\n        uint256 reward\\n    );\\n    event GovernanceChange(address governance);\\n}\\n\",\"keccak256\":\"0x722f7e71710343b93cdde80caa851110962fb7941d1b3864b7c0edb693ef63fb\",\"license\":\"MIT\"},\"contracts/bridge/BonusChefFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IMiniChefV2} from \\\"./interfaces/IMiniChefV2.sol\\\";\\nimport {BonusChef} from \\\"./BonusChef.sol\\\";\\n\\n// BonusChefFactory wraps bonus chef to facilitate deployment of new bonus chef contracts\\ncontract BonusChefFactory {\\n    event BonusChefCreated(address tokenAddress);\\n\\n    /// @notice deploys a new bonus chef contract\\n    function deploy(\\n        IMiniChefV2 miniChef,\\n        uint256 chefPoolID,\\n        address rewardsDistribution,\\n        address governance\\n    ) external returns (address) {\\n        BonusChef chef = new BonusChef(\\n            miniChef,\\n            chefPoolID,\\n            rewardsDistribution,\\n            governance\\n        );\\n\\n        emit BonusChefCreated(address(chef));\\n        return address(chef);\\n    }\\n}\\n\",\"keccak256\":\"0x6e2d59e9aa8defe3bdefb8956a20af9c5b85b952ea72309f324be3d1501c234f\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport {IRewarder} from \\\"./IRewarder.sol\\\";\\n\\ninterface IMiniChefV2 {\\n    /// @notice Info of each MCV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of SYNAPSE entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each MCV2 pool.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// Also known as the amount of SYNAPSE to distribute per block.\\n    struct PoolInfo {\\n        uint128 accSynapsePerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (uint128, uint64, uint64);\\n\\n    function updatePool(uint256 pid)\\n        external\\n        returns (PoolInfo memory);\\n\\n    function lpToken(uint256) external view returns (IERC20);\\n    function poolLength() external view returns (uint256);\\n\\n    function rewarder(uint256) external view returns (IRewarder);\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256, int256);\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function withdraw(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function harvest(uint256 pid, address to) external;\\n\\n    function withdrawAndHarvest(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\",\"keccak256\":\"0xb17dacc56f5ec25f5d89a79e3af3719b7048b6744c8dfb929c72c1d941d45679\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\n\\ninterface IRewarder {\\n    using BoringERC20 for IERC20;\\n\\n    function onSynapseReward(\\n        uint256 pid,\\n        address user,\\n        address recipient,\\n        uint256 synapseAmount,\\n        uint256 oldLpAmount\\n    ) external;\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256 synapseAmount\\n    ) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0xedd2bafd65f212301604f28b0eb4abe01d1bc73b088ee3fa138736cf7c4d9d04\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612faa806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639efd114f14610030575b600080fd5b6100796004803603608081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604082013581169160600135166100a2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080858585856040516100b590610189565b808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001945050505050604051809103906000f080158015610132573d6000803e3d6000fd5b506040805173ffffffffffffffffffffffffffffffffffffffff8316815290519192507fea1fddb842218c9428c3d55279c02be3e3f408157d572919f9d451d580151801919081900360200190a195945050505050565b612dde806101978339019056fe60e06040523480156200001157600080fd5b5060405162002dde38038062002dde833981810160405260808110156200003757600080fd5b50805160208083015160408085015160609586015160016000559585901b6001600160601b03191660805260a083905281516378ed5d1f60e01b81526004810184905291519495929490936001600160a01b038716926378ed5d1f9260248083019392829003018186803b158015620000af57600080fd5b505afa158015620000c4573d6000803e3d6000fd5b505050506040513d6020811015620000db57600080fd5b505160601b6001600160601b03191660c0526200010860008051602062002dbe8339815191528262000172565b6200012360008051602062002d9e8339815191528362000172565b6200013e60008051602062002dbe8339815191528062000182565b6200016860008051602062002d9e83398151915260008051602062002dbe83398151915262000182565b50505050620002da565b6200017e8282620001d4565b5050565b600082815260016020526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526001602052604090912060020155565b6000828152600160209081526040909120620001fb91839062001d1d6200024f821b17901c565b156200017e576200020b6200026f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000266836001600160a01b03841662000273565b90505b92915050565b3390565b6000620002818383620002c2565b620002b95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000269565b50600062000269565b60009081526001919091016020526040902054151590565b60805160601c60a05160c05160601c612a6e62000330600039806109a15280611cfb525080610b13528061114c52806111a25250806108b452806109d05280610ae452806110ac52806111735250612a6e6000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c8063839006f211610160578063d38bfff4116100d8578063e70b9e271161008c578063f122977711610071578063f122977714610873578063f36c8f5c14610899578063ff0d75ff146108a157610292565b8063e70b9e271461083d578063eb9e5ddc1461086b57610292565b8063d63b3c49116100bd578063d63b3c4914610744578063da09d19d1461080f578063e381bef61461083557610292565b8063d38bfff4146106f2578063d547741f1461071857610292565b8063a217fddf1161012f578063b6973f7211610114578063b6973f7214610689578063bcd11014146106af578063ca15c873146106d557610292565b8063a217fddf14610655578063b66503cf1461065d57610292565b8063839006f2146105a65780639010d07c146105cc57806391d14854146105ef5780639ce43f901461062f57610292565b806333d4cbf31161020e578063638634ee116101c25780637036828e116101a75780637036828e1461055b57806370a08231146105635780637eb489661461058957610292565b8063638634ee146105075780637035ab981461052d57610292565b8063372d9448116101f3578063372d94481461046f5780634005760a146104d95780635d910351146104e157610292565b806333d4cbf31461041d57806336568abe1461044357610292565b8063211dc32d11610265578063248a9ca31161024a578063248a9ca3146103ae5780632ce9aead146103cb5780632f2ff15d146103f157610292565b8063211dc32d1461035a578063221ca18c1461038857610292565b80630eb9eaf11461029757806318160ddd146102db5780631c5ef433146102f55780631dfa8e8114610321575b600080fd5b6102d9600480360360a08110156102ad57600080fd5b508035906001600160a01b036020820135811691604081013590911690606081013590608001356108a9565b005b6102e361099d565b60408051918252519081900360200190f35b6102d96004803603604081101561030b57600080fd5b506001600160a01b038135169060200135610a5d565b61033e6004803603602081101561033757600080fd5b5035610dc6565b604080516001600160a01b039092168252519081900360200190f35b6102e36004803603604081101561037057600080fd5b506001600160a01b0381358116916020013516610ded565b6102e36004803603602081101561039e57600080fd5b50356001600160a01b0316610e0b565b6102e3600480360360208110156103c457600080fd5b5035610e2e565b6102e3600480360360208110156103e157600080fd5b50356001600160a01b0316610e43565b6102d96004803603604081101561040757600080fd5b50803590602001356001600160a01b0316610e61565b6102d96004803603602081101561043357600080fd5b50356001600160a01b0316610ecd565b6102d96004803603604081101561045957600080fd5b50803590602001356001600160a01b0316610fff565b6104956004803603602081101561048557600080fd5b50356001600160a01b0316611060565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a0840152151560c0830152519081900360e00190f35b61033e6110aa565b6102e3600480360360208110156104f757600080fd5b50356001600160a01b03166110ce565b6102e36004803603602081101561051d57600080fd5b50356001600160a01b03166110ec565b6102e36004803603604081101561054357600080fd5b506001600160a01b038135811691602001351661111b565b6102e361114a565b6102e36004803603602081101561057957600080fd5b50356001600160a01b031661116e565b6102d96004803603602081101561059f57600080fd5b5035611238565b6102d9600480360360208110156105bc57600080fd5b50356001600160a01b03166112bf565b61033e600480360360408110156105e257600080fd5b5080359060200135611427565b61061b6004803603604081101561060557600080fd5b50803590602001356001600160a01b031661143f565b604080519115158252519081900360200190f35b6102e36004803603602081101561064557600080fd5b50356001600160a01b0316611457565b6102e3611475565b6102d96004803603604081101561067357600080fd5b506001600160a01b03813516906020013561147a565b6102d96004803603602081101561069f57600080fd5b50356001600160a01b0316611843565b6102e3600480360360208110156106c557600080fd5b50356001600160a01b03166118e8565b6102e3600480360360208110156106eb57600080fd5b5035611917565b6102d96004803603602081101561070857600080fd5b50356001600160a01b031661192e565b6102d96004803603604081101561072e57600080fd5b50803590602001356001600160a01b0316611a39565b6107766004803603606081101561075a57600080fd5b508035906001600160a01b036020820135169060400135611a92565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156107ba5781810151838201526020016107a2565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156107f95781810151838201526020016107e1565b5050505090500194505050505060405180910390f35b6102e36004803603602081101561082557600080fd5b50356001600160a01b0316611bdf565b6102e3611bfd565b6102e36004803603604081101561085357600080fd5b506001600160a01b0381358116916020013516611c21565b6102e3611c50565b6102e36004803603602081101561088957600080fd5b50356001600160a01b0316611c56565b6102e3611cd5565b61033e611cf9565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610926576040805162461bcd60e51b815260206004820152600760248201527f21706172656e7400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6002600054141561097e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055610991848483851515611d32565b50506001600055505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a2c57600080fd5b505afa158015610a40573d6000803e3d6000fd5b505050506040513d6020811015610a5657600080fd5b5051905090565b610a877f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b610ad8576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b306001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c346253d7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b6657600080fd5b505afa158015610b7a573d6000803e3d6000fd5b505050506040513d6020811015610b9057600080fd5b50516001600160a01b031614610bed576040805162461bcd60e51b815260206004820152601a60248201527f4d696e694368656620706f6f6c2069736e277420736574207570000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526002602052604090206008015460ff1615610c5e576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c20697320616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b80610cb0576040805162461bcd60e51b815260206004820152601060248201527f4475726174696f6e206973206e756c6c00000000000000000000000000000000604482015290519081900360640190fd5b6040805160e0810182526001600160a01b0393841680825260006020808401828152848601838152606086019788526080860184815260a08701858152600160c08901818152888852600296879052998720985189549c167fffffffffffffffffffffffff00000000000000000000000000000000000000009c8d16178955935188850155915193870193909355965160038087019190915591516004860155955160058501559351600890930180549315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090941693909317909255825493840183559190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018054909216179055565b60038181548110610dd357fe5b6000918252602090912001546001600160a01b0316905081565b6000610e028383610dfd8561116e565b611e5c565b90505b92915050565b6001600160a01b038116600090815260026020819052604090912001545b919050565b60009081526001602052604090206002015490565b6001600160a01b031660009081526002602052604090206004015490565b600082815260016020526040902060020154610e8490610e7f611ece565b61143f565b610ebf5760405162461bcd60e51b815260040180806020018281038252602f815260200180612967602f913960400191505060405180910390fd5b610ec98282611ed2565b5050565b610ef77f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b610f48576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060005b600354811015610f9e57836001600160a01b031660038281548110610f6f57fe5b6000918252602090912001546001600160a01b03161415610f965780925060019150610f9e565b600101610f4e565b5080610ff1576040805162461bcd60e51b815260206004820152601560248201527f52657761726420706f6f6c206e6f7420666f756e640000000000000000000000604482015290519081900360640190fd5b610ffa82611f3b565b505050565b611007611ece565b6001600160a01b0316816001600160a01b0316146110565760405162461bcd60e51b815260040180806020018281038252602f815260200180612a0a602f913960400191505060405180910390fd5b610ec982826120e3565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546008909501546001600160a01b03909416959492939192909160ff1687565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526002602052604090206003015490565b6001600160a01b0381166000908152600260205260408120600181015461111490429061214c565b9392505050565b6001600160a01b0391821660009081526002602090815260408083209390941682526006909201909152205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b7f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050604080518083038186803b15801561120557600080fd5b505afa158015611219573d6000803e3d6000fd5b505050506040513d604081101561122f57600080fd5b50519392505050565b6112627f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b6112b3576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6112bc81611f3b565b50565b6112e97f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b61133a576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600260205260409020600881015460ff16156113965760405162461bcd60e51b81526004018080602001828103825260238152602001806129e76023913960400191505060405180910390fd5b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d602081101561140f57600080fd5b50519050610ffa6001600160a01b0384163383612162565b6000828152600160205260408120610e029083612318565b6000828152600160205260408120610e029083612324565b6001600160a01b031660009081526002602052604090206005015490565b600081565b6114a47fd208cee4e5c276797506bf2048f7c1b03b32c5e17ee2bbc1f54b5df96001c2143361143f565b6114f5576040805162461bcd60e51b815260206004820152601460248201527f2172657761726473446973747269627574696f6e000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380831660009081526002602052604081208054859383929161151f9116611c56565b60058201558054611538906001600160a01b03166110ec565b60048201556001600160a01b03831615611594578054611562906001600160a01b03168484611e5c565b6001600160a01b0384166000908152600783016020908152604080832093909355600584015460068501909152919020555b846115e6576040805162461bcd60e51b815260206004820152601460248201527f5a65726f207265776172642070726f7669646564000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0386166000908152600260205260409020600881015460ff16611657576040805162461bcd60e51b815260206004820152601160248201527f506f6f6c206973206e6f74206164646564000000000000000000000000000000604482015290519081900360640190fd5b805461166e906001600160a01b0316333089612339565b806001015442106116935760038101546116899087906124f0565b60028201556116e4565b60018101546000906116a59042612557565b905060006116c08360020154836125b490919063ffffffff16565b60038401549091506116dc906116d68a8461260d565b906124f0565b600284015550505b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561174757600080fd5b505afa15801561175b573d6000803e3d6000fd5b505050506040513d602081101561177157600080fd5b505160038301549091506117869082906124f0565b826002015411156117de576040805162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015290519081900360640190fd5b426004830181905560038301546117f5919061260d565b60018301556040805188815290516001600160a01b038a16917fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29919081900360200190a25050505050505050565b61186d7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b6118be576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6112bc7fd208cee4e5c276797506bf2048f7c1b03b32c5e17ee2bbc1f54b5df96001c21482610ebf565b6001600160a01b03811660009081526002602081905260408220600381015491810154909161111491906125b4565b6000818152600160205260408120610e0590612667565b6119587f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b6119a9576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080516001600160a01b038316815290517f5ab1e8b2c0a96bffa69cb323894590e00556bdce76b87d529100949740e6a55a9181900360200190a1611a0f7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb133610fff565b6112bc7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb182610ebf565b600082815260016020526040902060020154611a5790610e7f611ece565b6110565760405162461bcd60e51b81526004018080602001828103825260308152602001806129966030913960400191505060405180910390fd5b6003546060908190818167ffffffffffffffff81118015611ab257600080fd5b50604051908082528060200260200182016040528015611adc578160200160208202803683370190505b50905060608267ffffffffffffffff81118015611af857600080fd5b50604051908082528060200260200182016040528015611b22578160200160208202803683370190505b5090506000611b308861116e565b905060005b848160ff161015611bd057600060038260ff1681548110611b5257fe5b9060005260206000200160009054906101000a90046001600160a01b0316905080858360ff1681518110611b8257fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611bad818b85611e5c565b848360ff1681518110611bbc57fe5b602090810291909101015250600101611b35565b50919890975095505050505050565b6001600160a01b031660009081526002602052604090206001015490565b7fd208cee4e5c276797506bf2048f7c1b03b32c5e17ee2bbc1f54b5df96001c21481565b6001600160a01b0391821660009081526002602090815260408083209390941682526007909201909152205490565b60035490565b6001600160a01b038116600090815260026020526040812081611c7761099d565b905080611c8a5750600501549050610e29565b611ccd611cc2826116d6670de0b6b3a7640000611cbc8760020154611cbc8960040154611cb68d6110ec565b90612557565b906125b4565b60058401549061260d565b949350505050565b7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb181565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610e02836001600160a01b038416612672565b838260005b600354811015611e0a5760006002600060038481548110611d5457fe5b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250611d8c9116611c56565b60058201558054611da5906001600160a01b03166110ec565b60048201556001600160a01b03841615611e01578054611dcf906001600160a01b03168585611e5c565b6001600160a01b0385166000908152600783016020908152604080832093909355600584015460068501909152919020555b50600101611d37565b508215611e545760005b600354811015611e5257611e4a60038281548110611e2e57fe5b6000918252602090912001546001600160a01b031688886126bc565b600101611e14565b505b505050505050565b6001600160a01b03808416600090815260026020908152604080832093861683526007840182528083205460068501909252822054919291611ec59190611ebf90670de0b6b3a7640000906116d690611eb890611cb68c611c56565b88906125b4565b9061260d565b95945050505050565b3390565b6000828152600160205260409020611eea9082611d1d565b15610ec957611ef7611ece565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006002600060038481548110611f4e57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206001810154909150421015611fce576040805162461bcd60e51b815260206004820152601660248201527f506f6f6c20686173206e6f7420636f6e636c7564656400000000000000000000604482015290519081900360640190fd5b6008810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061202857fe5b600091825260209091200154600380546001600160a01b03909216918490811061204e57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600380548061208757fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b60008281526001602052604090206120fb90826127cb565b15610ec957612108611ece565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081831061215b5781610e02565b5090919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061222b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016121ee565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461228d576040519150601f19603f3d011682016040523d82523d6000602084013e612292565b606091505b50915091508180156122c05750805115806122c057508080602001905160208110156122bd57600080fd5b50515b612311576040805162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fd5b5050505050565b6000610e0283836127e0565b6000610e02836001600160a01b038416612844565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061240a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123cd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461246c576040519150601f19603f3d011682016040523d82523d6000602084013e612471565b606091505b509150915081801561249f57508051158061249f575080806020019051602081101561249c57600080fd5b50515b611e54576040805162461bcd60e51b815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604482015290519081900360640190fd5b6000808211612546576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161254f57fe5b049392505050565b6000828211156125ae576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826125c357506000610e05565b828202828482816125d057fe5b0414610e025760405162461bcd60e51b81526004018080602001828103825260218152602001806129c66021913960400191505060405180910390fd5b600082820183811015610e02576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610e058261285c565b600061267e8383612844565b6126b457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e05565b506000610e05565b6001600160a01b0383166000908152600260205260409020600881015460ff1661272d576040805162461bcd60e51b815260206004820152601060248201527f506f6f6c20697320696e61637469766500000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526007820160205260409020548015612311576001600160a01b038085166000908152600784016020526040812055825461277891168483612162565b8154604080516001600160a01b03868116825260208201859052825181891694909116927fce405e67b4d6e56e438257e15f160ae28b450e6e7659bbc4c1f4e09a1ac846cb928290030190a35050505050565b6000610e02836001600160a01b038416612860565b815460009082106128225760405162461bcd60e51b81526004018080602001828103825260228152602001806129456022913960400191505060405180910390fd5b82600001828154811061283157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801561293a5783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830191908101906000908790839081106128b157fe5b90600052602060002001549050808760000184815481106128ce57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806128fe57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610e05565b6000915050610e0556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616e6e6f74207769746864726177206163746976652072657761726420746f6b656e416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220cf540d093fe72dd7d6f497622307b57c6d59390a2185c9243a2f30985e95b59a64736f6c634300060c0033d208cee4e5c276797506bf2048f7c1b03b32c5e17ee2bbc1f54b5df96001c21471840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1a2646970667358221220f562881c7b9a8008d446ff1e73ff3ff2431d80f805a2b8d8b9572df02b22fcf164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80639efd114f14610030575b600080fd5b6100796004803603608081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604082013581169160600135166100a2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080858585856040516100b590610189565b808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001945050505050604051809103906000f080158015610132573d6000803e3d6000fd5b506040805173ffffffffffffffffffffffffffffffffffffffff8316815290519192507fea1fddb842218c9428c3d55279c02be3e3f408157d572919f9d451d580151801919081900360200190a195945050505050565b612dde806101978339019056fe60e06040523480156200001157600080fd5b5060405162002dde38038062002dde833981810160405260808110156200003757600080fd5b50805160208083015160408085015160609586015160016000559585901b6001600160601b03191660805260a083905281516378ed5d1f60e01b81526004810184905291519495929490936001600160a01b038716926378ed5d1f9260248083019392829003018186803b158015620000af57600080fd5b505afa158015620000c4573d6000803e3d6000fd5b505050506040513d6020811015620000db57600080fd5b505160601b6001600160601b03191660c0526200010860008051602062002dbe8339815191528262000172565b6200012360008051602062002d9e8339815191528362000172565b6200013e60008051602062002dbe8339815191528062000182565b6200016860008051602062002d9e83398151915260008051602062002dbe83398151915262000182565b50505050620002da565b6200017e8282620001d4565b5050565b600082815260016020526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526001602052604090912060020155565b6000828152600160209081526040909120620001fb91839062001d1d6200024f821b17901c565b156200017e576200020b6200026f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000266836001600160a01b03841662000273565b90505b92915050565b3390565b6000620002818383620002c2565b620002b95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000269565b50600062000269565b60009081526001919091016020526040902054151590565b60805160601c60a05160c05160601c612a6e62000330600039806109a15280611cfb525080610b13528061114c52806111a25250806108b452806109d05280610ae452806110ac52806111735250612a6e6000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c8063839006f211610160578063d38bfff4116100d8578063e70b9e271161008c578063f122977711610071578063f122977714610873578063f36c8f5c14610899578063ff0d75ff146108a157610292565b8063e70b9e271461083d578063eb9e5ddc1461086b57610292565b8063d63b3c49116100bd578063d63b3c4914610744578063da09d19d1461080f578063e381bef61461083557610292565b8063d38bfff4146106f2578063d547741f1461071857610292565b8063a217fddf1161012f578063b6973f7211610114578063b6973f7214610689578063bcd11014146106af578063ca15c873146106d557610292565b8063a217fddf14610655578063b66503cf1461065d57610292565b8063839006f2146105a65780639010d07c146105cc57806391d14854146105ef5780639ce43f901461062f57610292565b806333d4cbf31161020e578063638634ee116101c25780637036828e116101a75780637036828e1461055b57806370a08231146105635780637eb489661461058957610292565b8063638634ee146105075780637035ab981461052d57610292565b8063372d9448116101f3578063372d94481461046f5780634005760a146104d95780635d910351146104e157610292565b806333d4cbf31461041d57806336568abe1461044357610292565b8063211dc32d11610265578063248a9ca31161024a578063248a9ca3146103ae5780632ce9aead146103cb5780632f2ff15d146103f157610292565b8063211dc32d1461035a578063221ca18c1461038857610292565b80630eb9eaf11461029757806318160ddd146102db5780631c5ef433146102f55780631dfa8e8114610321575b600080fd5b6102d9600480360360a08110156102ad57600080fd5b508035906001600160a01b036020820135811691604081013590911690606081013590608001356108a9565b005b6102e361099d565b60408051918252519081900360200190f35b6102d96004803603604081101561030b57600080fd5b506001600160a01b038135169060200135610a5d565b61033e6004803603602081101561033757600080fd5b5035610dc6565b604080516001600160a01b039092168252519081900360200190f35b6102e36004803603604081101561037057600080fd5b506001600160a01b0381358116916020013516610ded565b6102e36004803603602081101561039e57600080fd5b50356001600160a01b0316610e0b565b6102e3600480360360208110156103c457600080fd5b5035610e2e565b6102e3600480360360208110156103e157600080fd5b50356001600160a01b0316610e43565b6102d96004803603604081101561040757600080fd5b50803590602001356001600160a01b0316610e61565b6102d96004803603602081101561043357600080fd5b50356001600160a01b0316610ecd565b6102d96004803603604081101561045957600080fd5b50803590602001356001600160a01b0316610fff565b6104956004803603602081101561048557600080fd5b50356001600160a01b0316611060565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a0840152151560c0830152519081900360e00190f35b61033e6110aa565b6102e3600480360360208110156104f757600080fd5b50356001600160a01b03166110ce565b6102e36004803603602081101561051d57600080fd5b50356001600160a01b03166110ec565b6102e36004803603604081101561054357600080fd5b506001600160a01b038135811691602001351661111b565b6102e361114a565b6102e36004803603602081101561057957600080fd5b50356001600160a01b031661116e565b6102d96004803603602081101561059f57600080fd5b5035611238565b6102d9600480360360208110156105bc57600080fd5b50356001600160a01b03166112bf565b61033e600480360360408110156105e257600080fd5b5080359060200135611427565b61061b6004803603604081101561060557600080fd5b50803590602001356001600160a01b031661143f565b604080519115158252519081900360200190f35b6102e36004803603602081101561064557600080fd5b50356001600160a01b0316611457565b6102e3611475565b6102d96004803603604081101561067357600080fd5b506001600160a01b03813516906020013561147a565b6102d96004803603602081101561069f57600080fd5b50356001600160a01b0316611843565b6102e3600480360360208110156106c557600080fd5b50356001600160a01b03166118e8565b6102e3600480360360208110156106eb57600080fd5b5035611917565b6102d96004803603602081101561070857600080fd5b50356001600160a01b031661192e565b6102d96004803603604081101561072e57600080fd5b50803590602001356001600160a01b0316611a39565b6107766004803603606081101561075a57600080fd5b508035906001600160a01b036020820135169060400135611a92565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156107ba5781810151838201526020016107a2565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156107f95781810151838201526020016107e1565b5050505090500194505050505060405180910390f35b6102e36004803603602081101561082557600080fd5b50356001600160a01b0316611bdf565b6102e3611bfd565b6102e36004803603604081101561085357600080fd5b506001600160a01b0381358116916020013516611c21565b6102e3611c50565b6102e36004803603602081101561088957600080fd5b50356001600160a01b0316611c56565b6102e3611cd5565b61033e611cf9565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610926576040805162461bcd60e51b815260206004820152600760248201527f21706172656e7400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6002600054141561097e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055610991848483851515611d32565b50506001600055505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a2c57600080fd5b505afa158015610a40573d6000803e3d6000fd5b505050506040513d6020811015610a5657600080fd5b5051905090565b610a877f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b610ad8576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b306001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c346253d7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b6657600080fd5b505afa158015610b7a573d6000803e3d6000fd5b505050506040513d6020811015610b9057600080fd5b50516001600160a01b031614610bed576040805162461bcd60e51b815260206004820152601a60248201527f4d696e694368656620706f6f6c2069736e277420736574207570000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526002602052604090206008015460ff1615610c5e576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c20697320616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b80610cb0576040805162461bcd60e51b815260206004820152601060248201527f4475726174696f6e206973206e756c6c00000000000000000000000000000000604482015290519081900360640190fd5b6040805160e0810182526001600160a01b0393841680825260006020808401828152848601838152606086019788526080860184815260a08701858152600160c08901818152888852600296879052998720985189549c167fffffffffffffffffffffffff00000000000000000000000000000000000000009c8d16178955935188850155915193870193909355965160038087019190915591516004860155955160058501559351600890930180549315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090941693909317909255825493840183559190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018054909216179055565b60038181548110610dd357fe5b6000918252602090912001546001600160a01b0316905081565b6000610e028383610dfd8561116e565b611e5c565b90505b92915050565b6001600160a01b038116600090815260026020819052604090912001545b919050565b60009081526001602052604090206002015490565b6001600160a01b031660009081526002602052604090206004015490565b600082815260016020526040902060020154610e8490610e7f611ece565b61143f565b610ebf5760405162461bcd60e51b815260040180806020018281038252602f815260200180612967602f913960400191505060405180910390fd5b610ec98282611ed2565b5050565b610ef77f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b610f48576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060005b600354811015610f9e57836001600160a01b031660038281548110610f6f57fe5b6000918252602090912001546001600160a01b03161415610f965780925060019150610f9e565b600101610f4e565b5080610ff1576040805162461bcd60e51b815260206004820152601560248201527f52657761726420706f6f6c206e6f7420666f756e640000000000000000000000604482015290519081900360640190fd5b610ffa82611f3b565b505050565b611007611ece565b6001600160a01b0316816001600160a01b0316146110565760405162461bcd60e51b815260040180806020018281038252602f815260200180612a0a602f913960400191505060405180910390fd5b610ec982826120e3565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546008909501546001600160a01b03909416959492939192909160ff1687565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526002602052604090206003015490565b6001600160a01b0381166000908152600260205260408120600181015461111490429061214c565b9392505050565b6001600160a01b0391821660009081526002602090815260408083209390941682526006909201909152205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b7f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050604080518083038186803b15801561120557600080fd5b505afa158015611219573d6000803e3d6000fd5b505050506040513d604081101561122f57600080fd5b50519392505050565b6112627f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b6112b3576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6112bc81611f3b565b50565b6112e97f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b61133a576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600260205260409020600881015460ff16156113965760405162461bcd60e51b81526004018080602001828103825260238152602001806129e76023913960400191505060405180910390fd5b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d602081101561140f57600080fd5b50519050610ffa6001600160a01b0384163383612162565b6000828152600160205260408120610e029083612318565b6000828152600160205260408120610e029083612324565b6001600160a01b031660009081526002602052604090206005015490565b600081565b6114a47fd208cee4e5c276797506bf2048f7c1b03b32c5e17ee2bbc1f54b5df96001c2143361143f565b6114f5576040805162461bcd60e51b815260206004820152601460248201527f2172657761726473446973747269627574696f6e000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380831660009081526002602052604081208054859383929161151f9116611c56565b60058201558054611538906001600160a01b03166110ec565b60048201556001600160a01b03831615611594578054611562906001600160a01b03168484611e5c565b6001600160a01b0384166000908152600783016020908152604080832093909355600584015460068501909152919020555b846115e6576040805162461bcd60e51b815260206004820152601460248201527f5a65726f207265776172642070726f7669646564000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0386166000908152600260205260409020600881015460ff16611657576040805162461bcd60e51b815260206004820152601160248201527f506f6f6c206973206e6f74206164646564000000000000000000000000000000604482015290519081900360640190fd5b805461166e906001600160a01b0316333089612339565b806001015442106116935760038101546116899087906124f0565b60028201556116e4565b60018101546000906116a59042612557565b905060006116c08360020154836125b490919063ffffffff16565b60038401549091506116dc906116d68a8461260d565b906124f0565b600284015550505b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561174757600080fd5b505afa15801561175b573d6000803e3d6000fd5b505050506040513d602081101561177157600080fd5b505160038301549091506117869082906124f0565b826002015411156117de576040805162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015290519081900360640190fd5b426004830181905560038301546117f5919061260d565b60018301556040805188815290516001600160a01b038a16917fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29919081900360200190a25050505050505050565b61186d7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b6118be576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6112bc7fd208cee4e5c276797506bf2048f7c1b03b32c5e17ee2bbc1f54b5df96001c21482610ebf565b6001600160a01b03811660009081526002602081905260408220600381015491810154909161111491906125b4565b6000818152600160205260408120610e0590612667565b6119587f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb13361143f565b6119a9576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080516001600160a01b038316815290517f5ab1e8b2c0a96bffa69cb323894590e00556bdce76b87d529100949740e6a55a9181900360200190a1611a0f7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb133610fff565b6112bc7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb182610ebf565b600082815260016020526040902060020154611a5790610e7f611ece565b6110565760405162461bcd60e51b81526004018080602001828103825260308152602001806129966030913960400191505060405180910390fd5b6003546060908190818167ffffffffffffffff81118015611ab257600080fd5b50604051908082528060200260200182016040528015611adc578160200160208202803683370190505b50905060608267ffffffffffffffff81118015611af857600080fd5b50604051908082528060200260200182016040528015611b22578160200160208202803683370190505b5090506000611b308861116e565b905060005b848160ff161015611bd057600060038260ff1681548110611b5257fe5b9060005260206000200160009054906101000a90046001600160a01b0316905080858360ff1681518110611b8257fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611bad818b85611e5c565b848360ff1681518110611bbc57fe5b602090810291909101015250600101611b35565b50919890975095505050505050565b6001600160a01b031660009081526002602052604090206001015490565b7fd208cee4e5c276797506bf2048f7c1b03b32c5e17ee2bbc1f54b5df96001c21481565b6001600160a01b0391821660009081526002602090815260408083209390941682526007909201909152205490565b60035490565b6001600160a01b038116600090815260026020526040812081611c7761099d565b905080611c8a5750600501549050610e29565b611ccd611cc2826116d6670de0b6b3a7640000611cbc8760020154611cbc8960040154611cb68d6110ec565b90612557565b906125b4565b60058401549061260d565b949350505050565b7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb181565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610e02836001600160a01b038416612672565b838260005b600354811015611e0a5760006002600060038481548110611d5457fe5b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250611d8c9116611c56565b60058201558054611da5906001600160a01b03166110ec565b60048201556001600160a01b03841615611e01578054611dcf906001600160a01b03168585611e5c565b6001600160a01b0385166000908152600783016020908152604080832093909355600584015460068501909152919020555b50600101611d37565b508215611e545760005b600354811015611e5257611e4a60038281548110611e2e57fe5b6000918252602090912001546001600160a01b031688886126bc565b600101611e14565b505b505050505050565b6001600160a01b03808416600090815260026020908152604080832093861683526007840182528083205460068501909252822054919291611ec59190611ebf90670de0b6b3a7640000906116d690611eb890611cb68c611c56565b88906125b4565b9061260d565b95945050505050565b3390565b6000828152600160205260409020611eea9082611d1d565b15610ec957611ef7611ece565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006002600060038481548110611f4e57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206001810154909150421015611fce576040805162461bcd60e51b815260206004820152601660248201527f506f6f6c20686173206e6f7420636f6e636c7564656400000000000000000000604482015290519081900360640190fd5b6008810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061202857fe5b600091825260209091200154600380546001600160a01b03909216918490811061204e57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600380548061208757fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b60008281526001602052604090206120fb90826127cb565b15610ec957612108611ece565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081831061215b5781610e02565b5090919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061222b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016121ee565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461228d576040519150601f19603f3d011682016040523d82523d6000602084013e612292565b606091505b50915091508180156122c05750805115806122c057508080602001905160208110156122bd57600080fd5b50515b612311576040805162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fd5b5050505050565b6000610e0283836127e0565b6000610e02836001600160a01b038416612844565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061240a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123cd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461246c576040519150601f19603f3d011682016040523d82523d6000602084013e612471565b606091505b509150915081801561249f57508051158061249f575080806020019051602081101561249c57600080fd5b50515b611e54576040805162461bcd60e51b815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604482015290519081900360640190fd5b6000808211612546576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161254f57fe5b049392505050565b6000828211156125ae576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826125c357506000610e05565b828202828482816125d057fe5b0414610e025760405162461bcd60e51b81526004018080602001828103825260218152602001806129c66021913960400191505060405180910390fd5b600082820183811015610e02576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610e058261285c565b600061267e8383612844565b6126b457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e05565b506000610e05565b6001600160a01b0383166000908152600260205260409020600881015460ff1661272d576040805162461bcd60e51b815260206004820152601060248201527f506f6f6c20697320696e61637469766500000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526007820160205260409020548015612311576001600160a01b038085166000908152600784016020526040812055825461277891168483612162565b8154604080516001600160a01b03868116825260208201859052825181891694909116927fce405e67b4d6e56e438257e15f160ae28b450e6e7659bbc4c1f4e09a1ac846cb928290030190a35050505050565b6000610e02836001600160a01b038416612860565b815460009082106128225760405162461bcd60e51b81526004018080602001828103825260228152602001806129456022913960400191505060405180910390fd5b82600001828154811061283157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801561293a5783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830191908101906000908790839081106128b157fe5b90600052602060002001549050808760000184815481106128ce57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806128fe57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610e05565b6000915050610e0556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616e6e6f74207769746864726177206163746976652072657761726420746f6b656e416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220cf540d093fe72dd7d6f497622307b57c6d59390a2185c9243a2f30985e95b59a64736f6c634300060c0033d208cee4e5c276797506bf2048f7c1b03b32c5e17ee2bbc1f54b5df96001c21471840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1a2646970667358221220f562881c7b9a8008d446ff1e73ff3ff2431d80f805a2b8d8b9572df02b22fcf164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(address,uint256,address,address)": {
        "notice": "deploys a new bonus chef contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}