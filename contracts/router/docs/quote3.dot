digraph {
    sdk [label = "SDK";];
    router [label = "SynapseRouterV2";shape = rect;];
    quoter [label = "SwapQuoterV2";shape = rect;];
    bridgeAdapters [label = "All Bridge Adapters";shape = rect;];
    bridgeTokens [label = "List of Bridge Tokens";shape = rect;style = dashed;];
    node [shape = none; fontname = "Arial";];
    getDestinationAmountOut [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>synapseRouterV2.getDestinationAmountOut</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>{symbol: string, amountIn: uint256}[], tokenOut: address</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>destQueries: SwapQuery[]</TD>
        </TR>
        </TABLE>
        >;];
    symbolToToken [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>bridgeAdapter.symbolToToken</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>tokenSymbol</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>token: address</TD>
        </TR>
        </TABLE>
        >;];
    calculateBridgeFee [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>bridgeAdapter.calculateBridgeFee</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>bridgeToken: address, amountIn: uint256</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>feeAmount: uint256</TD>
        </TR>
        </TABLE>
        >;];
    getAmountOut [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>swapQuoterV2.getAmountOut</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>tokenIn, tokenOut, amountIn - feeAmount</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>query: SwapQuery</TD>
        </TR>
        </TABLE>
        >;];
    getWhitelistedPool [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>swapQuoterV2.getWhitelistedPool</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>tokenIn</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>pool: address</TD>
        </TR>
        </TABLE>
        >;];
    checkPoolQuote [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>swapQuoterV2.checkPoolQuote</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>pool, tokenIn, tokenOut, amountIn - feeAmount</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>query: SwapQuery</TD>
        </TR>
        </TABLE>
        >;];
    
    sdk -> router [label = "1a. Call Router";];
    sdk -> getDestinationAmountOut [label = "1a. Call Router"; style = dashed;];
    
    router -> bridgeAdapters [label = "2a. Call every Bridge Adapter";];
    bridgeAdapters -> symbolToToken [label = "2a. Call every Bridge Adapter"; style = dashed;];
    symbolToToken -> router [label = "2b. Bridge token address";];
    router -> bridgeTokens [label = "2c. Compile token addresses list";];
    bridgeTokens -> bridgeAdapters [label = "2d. Call token's Bridge Adapter";];
    bridgeAdapters -> calculateBridgeFee [label = "2d. Call token's Bridge Adapter"; style = dashed;];
    calculateBridgeFee -> bridgeTokens [label = "2e. Compile fee amounts list";];
    
    bridgeTokens -> quoter [label = "3a. Call Quoter";];
    quoter -> getAmountOut [label = "3a. Call Quoter"; style = dashed;];
    
    quoter -> getWhitelistedPool [label = "4a. Get tokenIn's pool"; style = dashed;];
    quoter -> checkPoolQuote [label = "4b. Check tokenIn's pool"; style = dashed;];
    getAmountOut -> bridgeTokens [label = "4c. Return a quote";];
    
    bridgeTokens -> sdk [xlabel = "5. Compile list of SwapQuery quotes";];
    
    subgraph {
        rank = same;
        edge [style = invis;];
        sdk -> getDestinationAmountOut;
    }
    
    subgraph {
        rank = same;
        edge [style = invis;];
        bridgeTokens -> bridgeAdapters -> symbolToToken;
    }
    
    subgraph {
        rank = same;
        edge [style = invis;];
        quoter -> getAmountOut;
    }
}