digraph {
    sdk [label = "SDK";];
    router [label = "SynapseRouterV2";shape = rect;];
    quoter [label = "SwapQuoter";shape = rect;];
    bridgeAdapters [label = "All Bridge Adapters";shape = rect;];
    bridgeTokens [label = "All Bridge Tokens";shape = rect;style = dashed;];
    connectedTokens [label = "Connected Bridge Tokens";shape = rect;style = dashed;];
    node [shape = none; fontname = "Arial";];
    getConnectedBridgeTokens [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>synapseRouterV2.getConnectedBridgeTokens</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>tokenOut</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>bridgeTokens: {symbol: string, token:address}[]</TD>
        </TR>
        </TABLE>
        >;];
    getBridgeTokens [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>bridgeAdapter.getBridgeTokens</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>bridgeTokens: {symbol: string, token:address}[]</TD>
        </TR>
        </TABLE>
        >;];
    findConnectedTokens [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>swapQuoterV2.findConnectedTokens</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>tokensIn[], tokenOut</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>amountFound: uint256, isConnected: bool[]</TD>
        </TR>
        </TABLE>
        >;];
    getWhitelistedPool [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>swapQuoterV2.getWhitelistedPool</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>bridgeToken</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>poolAddress: address</TD>
        </TR>
        </TABLE>
        >;];
    isConnected [label = <
        <TABLE>
        <TR>
        <TD>Function</TD>
        <TD>swapQuoterV2.isConnected</TD>
        </TR>
        <TR>
        <TD>Parameters</TD>
        <TD>pool, tokenIn, tokenOut</TD>
        </TR>
        <TR>
        <TD>Return</TD>
        <TD>isConnected: bool</TD>
        </TR>
        </TABLE>
        >;];
    
    sdk -> router [label = "1a. Call Router";];
    sdk -> getConnectedBridgeTokens [label = "1a. Call Router"; style = dashed;];
    
    router -> bridgeAdapters [label = "2a. Call every Bridge Adapter";];
    bridgeAdapters -> getBridgeTokens [label = "2a. Call every Bridge Adapter"; style = dashed;];
    getBridgeTokens -> router [label = "2b. Adapter's supported tokens";];
    router -> bridgeTokens [label = "2c. Compile list of supported tokens";];
    
    bridgeTokens -> quoter [label = "3a. Call Quoter";];
    bridgeTokens -> findConnectedTokens [label = "3a. Call Quoter"; style = dashed;];
    
    quoter -> getWhitelistedPool [label = "4a. Get every whitelisted pool"; style = dashed;];
    quoter -> isConnected [label = "4a. Check every whitelisted pool"; style = dashed;];
    bridgeTokens -> connectedTokens [label = "4b. Filter only connected tokens";];
    connectedTokens -> sdk [xlabel = "4c. List of connected tokens";];
    
    subgraph {
        rank = same;
        edge [style = invis;];
        connectedTokens -> getConnectedBridgeTokens -> router;
    }
}